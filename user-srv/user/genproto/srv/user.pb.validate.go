// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: srv/user.proto

package go_micro_service_user

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _user_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on Message with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Message) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Say

	return nil
}

// MessageValidationError is the validation error returned by Message.Validate
// if the designated constraints aren't met.
type MessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MessageValidationError) ErrorName() string { return "MessageValidationError" }

// Error satisfies the builtin error interface
func (e MessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MessageValidationError{}

// Validate checks the field values on Request with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Request) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Name

	return nil
}

// RequestValidationError is the validation error returned by Request.Validate
// if the designated constraints aren't met.
type RequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RequestValidationError) ErrorName() string { return "RequestValidationError" }

// Error satisfies the builtin error interface
func (e RequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RequestValidationError{}

// Validate checks the field values on Response with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Response) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Msg

	return nil
}

// ResponseValidationError is the validation error returned by
// Response.Validate if the designated constraints aren't met.
type ResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ResponseValidationError) ErrorName() string { return "ResponseValidationError" }

// Error satisfies the builtin error interface
func (e ResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ResponseValidationError{}

// Validate checks the field values on StreamingRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StreamingRequest) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// StreamingRequestValidationError is the validation error returned by
// StreamingRequest.Validate if the designated constraints aren't met.
type StreamingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamingRequestValidationError) ErrorName() string { return "StreamingRequestValidationError" }

// Error satisfies the builtin error interface
func (e StreamingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamingRequestValidationError{}

// Validate checks the field values on StreamingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *StreamingResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Count

	return nil
}

// StreamingResponseValidationError is the validation error returned by
// StreamingResponse.Validate if the designated constraints aren't met.
type StreamingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StreamingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StreamingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StreamingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StreamingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StreamingResponseValidationError) ErrorName() string {
	return "StreamingResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StreamingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStreamingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StreamingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StreamingResponseValidationError{}

// Validate checks the field values on Ping with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Ping) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stroke

	return nil
}

// PingValidationError is the validation error returned by Ping.Validate if the
// designated constraints aren't met.
type PingValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingValidationError) ErrorName() string { return "PingValidationError" }

// Error satisfies the builtin error interface
func (e PingValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPing.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingValidationError{}

// Validate checks the field values on Pong with the rules defined in the proto
// definition for this message. If any rules are violated, an error is returned.
func (m *Pong) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Stroke

	return nil
}

// PongValidationError is the validation error returned by Pong.Validate if the
// designated constraints aren't met.
type PongValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PongValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PongValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PongValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PongValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PongValidationError) ErrorName() string { return "PongValidationError" }

// Error satisfies the builtin error interface
func (e PongValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPong.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PongValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PongValidationError{}
